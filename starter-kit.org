#+TITLE: Emacs Starter Kit
#+SEQ_TODO: PROPOSED TODO STARTED | DONE DEFERRED REJECTED
#+OPTIONS: H:3 num:nil toc:t
#+STARTUP: oddeven

#+begin_quote 
Emacs outshines all other editing software in approximately the
same way that the noonday sun does the stars. It is not just bigger
and brighter; it simply makes everything else vanish.
#+end_quote
-Neal Stephenson, "In the Beginning was the Command Line"

* Emacs Starter Kit

This should provide a saner set of defaults than you get normally with
Emacs. It's intended for beginners, but it should provide a reasonable
working environment for anyone using Emacs for dynamic languages. The
main advantage of the Starter Kit is that it provides better default
settings and bundles many useful libraries.

The latest version is at http://github.com/technomancy/emacs-starter-kit/

** Learning

This won't teach you Emacs, but it'll make it easier to get
comfortable. To access the tutorial, press control-h followed by t.

The [[http://emacswiki.org][Emacs Wiki]] is also very handy.

** Installation

1. Install Emacs (at least version 22) Use your package manager if you
   have one.  Otherwise, Mac users should get it [[http://www.apple.com/downloads/macosx/unix_open_source/carbonemacspackage.html][from Apple]], or
   install it directly from [[http://savannah.gnu.org/projects/emacs/][from source]] following the instructions in
   =nextstep/INSTALL=.  Windows users can get it [[http://ftp.gnu.org/gnu/emacs/windows/emacs-22.3-bin-i386.zip][from GNU]].
2. Move the directory containing this file to =~/.emacs.d= [1]
3. Launch Emacs!

If you are missing some autoloads after an update (should manifest
itself as "void function: foobar" errors) try M-x regen-autoloads.

If you want to keep your regular ~/.emacs.d in place and just launch a
single instance using the starter kit, try the following invocation:

#+begin_src sh
  emacs -q -l ~/src/emacs-starter-kit/init.el
#+end_src

Note that having a ~/.emacs file might override the starter kit
loading, so if you've having trouble loading it, make sure that file
is not present.

** Structure

The init.el file is where everything begins. It's the first file to
get loaded. Additional customization embedded in this file provides
what I consider to be better defaults, both for different programming
languages and for built-in Emacs features like bindings or registers.

Files that are pending submission to [[* Emacs Lisp Package Archive][ELPA]] are bundled with the starter
kit under the directory [[file:elpa-to-submit/][elpa-to-submit/]]. The understanding is that
these are bundled just because nobody's gotten around to turning them
into packages, and the bundling of them is temporary. For these
libraries, autoloads will be generated and kept in the [[file:loaddefs.el][loaddefs.el]]
file. This allows them to be loaded on demand rather than at startup.
Additionally any emacs-lisp packages located under the [[file:src/][src/]] directory
will be added to the load-path.

There are also a few files that are meant for code that doesn't belong
in the Starter Kit. First, the user-specific-config file is the file
named after your user with the extensions =.el= or =.org= [2]. In
addition, if a directory named after your user exists, it will be
added to the load-path, and any elisp or org-mode w/embedded elisp
files in it will be loaded. Finally, the Starter Kit will look for a
file named after the current hostname ending in =.el= or =.org= which
will allow host-specific configuration. This is where you should put
code that you don't think would be useful to everyone. That will allow
you to merge with newer versions of the starter-kit without conflicts.

** Emacs Lisp Package Archive

Libraries from [[http://tromey.com/elpa][ELPA]] are preferred when available since dependencies
are handled automatically, and the burden to update them is removed
from the user. In the long term, ideally everything would be installed
via ELPA, and only [[file:package.el][package.el]] would need to be distributed with the
starter kit. (Or better yet, [[file:package.el][package.el]] would come with Emacs...) See
[[* Starter Kit
 ELPA][Starter Kit ELPA]] for a list of libraries that are pending submission
to ELPA. Packages get installed in the [[file:elpa/][elpa/]] directory.

There's no vendor/ directory in the starter kit because if an external
library is useful enough to be bundled with the starter kit, it should
be useful enough to submit to ELPA so that everyone can use it, not
just users of the starter kit.  However any packages included in the
[[file:src][src/]] directory will be added to the load-path, for tracking bleeding
edge packages.

Sometimes packages are removed from the Starter Kit as they get added
to ELPA itself. This has occasionally caused problems with certain
packages. If you run into problems with such a package, try removing
everything from inside the elpa/ directory and invoking M-x
starter-kit-elpa-install in a fresh instance.

** Contributing

If you know your way around Emacs, please try out the starter kit as a
replacement for your regular dotfiles for a while. If there's anything
you just can't live without, add it or let me know so I can add
it. Take a look at what happens in [[file:init.el][init.el]] to get started.

Also: see the [[* Tasks][Tasks section]] in this document. Helping submit new
libraries to ELPA is the easiest way to help out. There are two ways
you can do this: either take new libraries and make them ready for
ELPA, dropping them in the elpa-to-submit directory or take files that
are already in elpa-to-submit, ensuring all their dependencies are
correctly loaded into ELPA, and sending them to the ELPA
maintainer. There are details at http://tromey.com/elpa/upload.html
for how ELPA submission works. Grep the project for TODO for other
things.

Files are licensed under the same license as Emacs unless otherwise
specified. See the file COPYING for details.

The latest version is at http://github.com/technomancy/emacs-starter-kit/

On Unix, =/home/$USER/.emacs.d=, on windows =Documents and
Settings/%your user name%/Application Data=


* Tasks

** TODO Submit the packages in starter-kit-elpa.el to ELPA.

** STARTED Greg Newman is working on Python helpers.

** PROPOSED should yasnippet be included in rinari?

** STARTED submit ruby fixes to flymake

** PROPOSED which-func-mode in ruby?
** TODO get jabber.el to automatically disconnect when suspending/hibernating (via dbus)


* Starter Kit Basics

** Load path etc.

#+srcname: starter-kit-load-paths
#+begin_src emacs-lisp 
  (setq dotfiles-dir (file-name-directory
                      (or (buffer-file-name) load-file-name)))
  
  (add-to-list 'load-path dotfiles-dir)
  (add-to-list 'load-path (concat dotfiles-dir "/elpa-to-submit"))
  (add-to-list 'load-path (concat dotfiles-dir "/elpa-to-submit/jabber"))
  
  (setq autoload-file (concat dotfiles-dir "loaddefs.el"))
  (setq package-user-dir (concat dotfiles-dir "elpa"))
  (setq custom-file (concat dotfiles-dir "custom.el"))
#+end_src

** Ubiquitous Packages

These should be loaded on startup rather than autoloaded on demand
since they are likely to be used in every session

#+srcname: starter-kit-load-on-startup
#+begin_src emacs-lisp 
  (require 'cl)
  (require 'saveplace)
  (require 'ffap)
  (require 'uniquify)
  (require 'ansi-color)
  (require 'recentf)
#+end_src

** Emacs 22 Backport

backport some functionality to Emacs 22 if needed
#+srcname: starter-kit-emacs-22-helper
#+begin_src emacs-lisp 
  (require 'dominating-file)
#+end_src

this must be loaded before ELPA since it bundles its own
out-of-date js stuff. TODO: fix it to use ELPA dependencies
#+srcname: start-kit-nxhtml
#+begin_src emacs-lisp 
  (load "elpa-to-submit/nxhtml/autostart")
#+end_src

** ELPA (Emacs Lisp Package Manager)

Load up [[http://tromey.com/elpa/][ELPA]], the Emacs Lisp package manager

#+srcname: start-kit-elpa
#+begin_src emacs-lisp 
  (require 'package)
  (package-initialize)
  (require 'starter-kit-elpa)
#+end_src

** Starter Kit Customizations

Load up starter kit customizations

#+srcname: start-kit-customizations
#+begin_src emacs-lisp 
  (require 'starter-kit-defuns)
  (require 'starter-kit-bindings)
  (require 'starter-kit-misc)
  (require 'starter-kit-registers)
  (require 'starter-kit-eshell)
  (require 'starter-kit-lisp)
  (require 'starter-kit-perl)
  (require 'starter-kit-ruby)
  (require 'starter-kit-js)
  
  (regen-autoloads)
  (load custom-file 'noerror)
#+end_src

** Work around OS X bug

Work around a bug on OS X where system-name is FQDN
#+srcname: start-kit-osX-workaround
#+begin_src emacs-lisp 
  (if (eq system-type 'darwin)
      (setq system-name (car (split-string system-name "\\."))))
#+end_src

** System/User specific customizations

You can keep system- or user-specific customizations here

#+srcname: start-kit-user/system-setup
#+begin_src emacs-lisp 
  (setq system-specific-config (concat dotfiles-dir system-name ".el")
        user-specific-config (concat dotfiles-dir user-login-name ".el")
        user-specific-dir (concat dotfiles-dir user-login-name))
  (add-to-list 'load-path user-specific-dir)
  
  (if (file-exists-p system-specific-config) (load system-specific-config))
  (if (file-exists-p user-specific-config) (load user-specific-config))
  (if (file-exists-p user-specific-dir)
    (mapc #'load (directory-files user-specific-dir nil ".*el$")))
#+end_src


* COMMENT Footnotes

[1] If you already have a directory at ~/.emacs.d move it out of the
way and put this there instead.

[2] The emacs starter kit uses [[http://github.com/eschulte/org-babel/tree/master][org-babel]] to load embedded elisp code
directly from [[http://orgmode.org/][Org Mode]] documents.
