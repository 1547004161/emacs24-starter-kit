#+TITLE: Starter Kit Bindings --- Set up some handy key bindings
#+OPTIONS: toc:nil num:nil ^:nil

This is part of the [[file:starter-kit.org][Emacs Starter Kit]]

* tasks

** TODO switch to kbd invocations everywhere

* code / customizations

** You know, like Readline.
#+begin_emacs-lisp 
(global-set-key (kbd "C-M-h") 'backward-kill-word)
#+end_emacs-lisp

** Align your code in a pretty way.
#+begin_emacs-lisp 
(global-set-key (kbd "C-x \\") 'align-regexp)
#+end_emacs-lisp

** Completion that uses many different methods to find options.
#+begin_emacs-lisp 
(global-set-key (kbd "M-/") 'hippie-expand)
#+end_emacs-lisp

** Perform general cleanup.
#+begin_emacs-lisp 
(global-set-key (kbd "C-c n") 'cleanup-buffer)
#+end_emacs-lisp

** Turn on the menu bar for exploring new modes
#+begin_emacs-lisp 
(global-set-key [f1] 'menu-bar-mode)
#+end_emacs-lisp

** Font size
#+begin_emacs-lisp 
(define-key global-map (kbd "C-+") 'text-scale-increase)
(define-key global-map (kbd "C--") 'text-scale-decrease)
#+end_emacs-lisp

** Use regex searches by default.
#+begin_emacs-lisp 
(global-set-key (kbd "C-s") 'isearch-forward-regexp)
(global-set-key (kbd "\C-r") 'isearch-backward-regexp)
(global-set-key (kbd "C-M-s") 'isearch-forward)
(global-set-key (kbd "C-M-r") 'isearch-backward)
#+end_emacs-lisp

** Jump to a definition in the current file. (This is awesome.)
#+begin_emacs-lisp 
(global-set-key (kbd "C-x C-i") 'ido-imenu)
#+end_emacs-lisp

** File finding
#+begin_emacs-lisp 
(global-set-key (kbd "C-x M-f") 'ido-find-file-other-window)
(global-set-key (kbd "C-x C-M-f") 'find-file-in-project)
(global-set-key (kbd "C-x f") 'recentf-ido-find-file)
(global-set-key (kbd "C-x C-p") 'find-file-at-point)
(global-set-key (kbd "C-c y") 'bury-buffer)
(global-set-key (kbd "C-c r") 'revert-buffer)
(global-set-key (kbd "M-`") 'file-cache-minibuffer-complete)
(global-set-key (kbd "C-x C-b") 'ibuffer)
#+end_emacs-lisp

** Window switching. (C-x o goes to the next window)
#+begin_emacs-lisp 
(windmove-default-keybindings) ;; Shift+direction
(global-set-key (kbd "C-x O") (lambda () (interactive) (other-window -1))) ;; back one
(global-set-key (kbd "C-x C-o") (lambda () (interactive) (other-window 2))) ;; forward two
#+end_emacs-lisp

** Indentation help
#+begin_emacs-lisp 
(global-set-key (kbd "C-x ^") 'join-line)
#+end_emacs-lisp

** Start eshell or switch to it if it's active.
#+begin_emacs-lisp 
(global-set-key (kbd "C-x m") 'eshell)
#+end_emacs-lisp

** Start a new eshell even if one is active.
#+begin_emacs-lisp 
(global-set-key (kbd "C-x M") (lambda () (interactive) (eshell t)))
#+end_emacs-lisp

** Start a regular shell if you prefer that.
#+begin_emacs-lisp 
(global-set-key (kbd "C-x M-m") 'shell)
#+end_emacs-lisp

** If you want to be able to M-x without meta
#+begin_emacs-lisp 
(global-set-key (kbd "C-x C-m") 'execute-extended-command)
#+end_emacs-lisp

** Fetch the contents at a URL, display it raw.
#+begin_emacs-lisp 
(global-set-key (kbd "C-x h") 'view-url)
#+end_emacs-lisp

** Help should search more than just commands
#+begin_emacs-lisp 
(global-set-key (kbd "C-h a") 'apropos)
#+end_emacs-lisp

** Should be able to eval-and-replace anywhere.
#+begin_emacs-lisp 
(global-set-key (kbd "C-c e") 'eval-and-replace)
#+end_emacs-lisp

** Applications
#+begin_emacs-lisp 

(global-set-key (kbd "C-c j") (lambda () (interactive) (switch-or-start 'jabber-connect "*-jabber-*")))
(global-set-key (kbd "C-c g") (lambda () (interactive) (switch-or-start 'gnus "*Group*")))
(global-set-key (kbd "C-c i") (lambda () (interactive) (switch-or-start (lambda ()
                                                                     (rcirc-connect "irc.freenode.net"))
                                                                   "*irc.freenode.net*")))
(global-set-key (kbd "C-c J") 'jabber-send-presence)
(global-set-key (kbd "C-c M-j") 'jabber-disconnect)
(global-set-key (kbd "C-x g") 'magit-status)
#+end_emacs-lisp

** This is a little hacky since VC doesn't support git add internally
#+begin_emacs-lisp 
(eval-after-load 'vc
  (define-key vc-prefix-map "i" '(lambda () (interactive)
                                   (if (not (eq 'Git (vc-backend buffer-file-name)))
                                       (vc-register)
                                     (shell-command (format "git add %s" buffer-file-name))
                                     (message "Staged changes.")))))
#+end_emacs-lisp

** Activate occur easily inside isearch
#+begin_emacs-lisp 
(define-key isearch-mode-map (kbd "C-o")
  (lambda () (interactive)
    (let ((case-fold-search isearch-case-fold-search))
      (occur (if isearch-regexp isearch-string (regexp-quote isearch-string))))))
#+end_emacs-lisp

** Closing
#+begin_emacs-lisp 
(provide 'starter-kit-bindings)
;;; starter-kit-bindings.el ends here
#+end_emacs-lisp
